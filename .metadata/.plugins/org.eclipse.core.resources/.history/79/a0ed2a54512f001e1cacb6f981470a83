package com.fms.pfc.service.api.main;

import java.io.File;
import java.io.IOException;
import java.util.Date;
import java.util.List;
import java.util.Objects;

import javax.transaction.Transactional;

import org.apache.commons.io.FileUtils;
import org.apache.commons.lang.StringUtils;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Service;
import org.springframework.web.multipart.MultipartFile;

import com.fms.pfc.domain.converter.main.ProdFileConverter;
import com.fms.pfc.domain.dto.main.HplModelDto;
import com.fms.pfc.domain.dto.main.ProdFileDto;
import com.fms.pfc.domain.model.main.ProdFile;
import com.fms.pfc.domain.model.main.ProdFileSearch;
import com.fms.pfc.repository.main.api.ProdFileRepository;
import com.fms.pfc.repository.main.api.ProdFileSearchRepository;

@Service
public class ProdFileService {

	private final Logger logger = LoggerFactory.getLogger(ProdFileService.class);

	private ProdFileRepository prodFileRepo;
	private ProdFileConverter prodFileConv;
	private ProdFileSearchRepository prodFileSearchRepo;
	private HplModelService hplModelServ;

	@Autowired
	public ProdFileService(ProdFileRepository prodFileRepo, ProdFileConverter prodFileConv,
			ProdFileSearchRepository prodFileSearchRepo, HplModelService hplModelServ) {
		super();
		this.prodFileRepo = prodFileRepo;
		this.prodFileConv = prodFileConv;
		this.prodFileSearchRepo = prodFileSearchRepo;
		this.hplModelServ = hplModelServ;
	}

	public ProdFile findById(Integer id) {
		return prodFileRepo.findById(id).orElse(null);
	}

	public ProdFileDto findDtoById(Integer id) {
		ProdFile rel = findById(id);
		return prodFileConv.entityToDto(rel);
	}

	public List<ProdFileDto> findAllDto() {
		List<ProdFile> models = prodFileRepo.findAll();
		return prodFileConv.entityToDtoList(models);
	}
	
	public List<HplModelDto> findHplModelSelectItems(Integer parentId) {
		return hplModelServ.findAllByParentNative(parentId);
	}

	public List<ProdFileSearch> searchByCriteria(Integer searchHplId, Integer searchHplModelId, String searchYear,
			String searchMth, String g2LotNo, String g2LotNoExp, String path, String pathExp) {
		return prodFileSearchRepo.searchByCriteria(searchHplId == null ? 0 : searchHplId,
				searchHplModelId == null ? 0 : searchHplModelId, searchYear, searchMth, g2LotNo, g2LotNoExp, path,
				pathExp);
	}

	@Transactional
	public Integer save(ProdFileDto dto, String userId, boolean editFileUpdate, MultipartFile finalFileContent) {
		Date currentDate = new Date();
		String dir = "";
		// save parent
		if (Objects.isNull(dto.getPkPfileId()) || 0 == dto.getPkPfileId()) {
			dto.setCreatorId(userId);
			dto.setCreatedDatetime(currentDate);
			dir = dto.getFilePath();
		} else {
			ProdFileDto existing = findDtoById(dto.getPkPfileId());
			dto.setCreatorId(existing.getCreatorId());
			dto.setCreatedDatetime(existing.getCreatedDatetime());
			dto.setModifierId(userId);
			dto.setModifiedDatetime(currentDate);
			
			if(!editFileUpdate) {
				dto.setFileName(existing.getFileName());
				dto.setFileSize(existing.getFileSize());
				dto.setFileType(existing.getFileType());
				dto.setCrcValue(existing.getCrcValue());
			}
		}

		ProdFile entity = prodFileConv.dtoToEntity(dto);
		prodFileRepo.saveAndFlush(entity);
		
		try {
			saveFileToDisk(finalFileContent, dir);
		} catch (IOException e) {
			// TODO Auto-generated catch block
			e.printStackTrace();
		}

		return entity.getPkPfileId();
	}

	@Transactional
	public void delete(Integer id) {
		prodFileRepo.deleteById(id);
	}
	
	/**
	 * Save file to disk
	 * @param finalFileContent
	 * @param dir
	 * @throws IOException
	 */
	private void saveFileToDisk(MultipartFile finalFileContent, String dir) throws Exception {
		
		if(Objects.isNull(finalFileContent) || StringUtils.isEmpty(dir)) {
			throw new Exception("File or directory is not supplied or null!");
		}
		
		File saveFile = new File(dir+finalFileContent.getOriginalFilename());
		FileUtils.writeByteArrayToFile(saveFile, finalFileContent.getBytes());		
	}

}
