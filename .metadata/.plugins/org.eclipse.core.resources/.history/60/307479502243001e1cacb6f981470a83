package com.fms.pfc.controller.base;

import java.security.SecureRandom;
import java.text.DateFormat;
import java.text.SimpleDateFormat;
import java.util.Date;
import java.util.HashMap;
import java.util.List;
import java.util.Locale;
import java.util.Map;
import java.util.stream.Collectors;

import javax.servlet.http.HttpServletRequest;
import javax.servlet.http.HttpServletResponse;
import javax.servlet.http.HttpSession;
import javax.validation.Valid;

import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.context.MessageSource;
import org.springframework.mail.SimpleMailMessage;
import org.springframework.mail.javamail.JavaMailSender;
import org.springframework.security.crypto.bcrypt.BCryptPasswordEncoder;
import org.springframework.stereotype.Controller;
import org.springframework.web.bind.annotation.GetMapping;
import org.springframework.web.bind.annotation.PostMapping;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestParam;
import org.springframework.web.context.annotation.SessionScope;
import org.springframework.web.servlet.ModelAndView;

import com.fms.pfc.common.AlertDefEnum;
import com.fms.pfc.common.Authority;
import com.fms.pfc.common.CommonConstants;
import com.fms.pfc.domain.model.AlertMessage;
import com.fms.pfc.domain.model.Usr;
import com.fms.pfc.domain.model.UsrProfile;
import com.fms.pfc.domain.model.UsrRole;
import com.fms.pfc.service.api.base.AlertMessageService;
import com.fms.pfc.service.api.base.GroupService;
import com.fms.pfc.service.api.base.MenuRoleFunctionService;
import com.fms.pfc.service.api.base.OrganizationService;
import com.fms.pfc.service.api.base.PassHisService;
import com.fms.pfc.service.api.base.RoleService;
import com.fms.pfc.service.api.base.TrxHisService;
import com.fms.pfc.service.api.base.UserProfileService;
import com.fms.pfc.service.api.base.UsrRoleService;
import com.fms.pfc.validation.common.CommonValidation;

@Controller
@SessionScope
public class UserProfileController {
	
	private final Logger logger = LoggerFactory.getLogger(UserProfileController.class);

	private UserProfileService userProfileServ;
	private GroupService groupServ;
	private UsrRoleService userRoleServ;
	private RoleService roleServ;
	private OrganizationService orgServ;
	private PassHisService pwdHistServ;
	private Authority auth;
	private JavaMailSender javaMailSender;
	private CommonValidation commonValServ;
	private MessageSource msgSource;
	private TrxHisService trxHistServ;
	private AlertMessageService alertMsgServ;
	private MenuRoleFunctionService mrfServ;

	private final String ORG_NAME_TXT = "Organization Name";
	private final String USR_ID_TXT = "User ID";
	private final String USR_NAME_TXT = "User Name";
	private final String EMAIL_TXT = "Email";
	private final String USR_GRP_TXT = "User Group";
	private final String USR_RL_TXT = "User Role Txt";
	private final String EFFECT_START_TXT = "Effective Start Date";
	private final String EFFECT_END_TXT = "Effective End Date";
	private static final int MENU_ITEM_ID = 702;
	private Map<String, Object> model = new HashMap<String, Object>();

	@Autowired
	public UserProfileController(UserProfileService userProfileServ, GroupService groupServ,
			UsrRoleService userRoleServ, RoleService roleServ, OrganizationService orgServ, PassHisService pwdHistServ,
			Authority auth, JavaMailSender javaMailSender, CommonValidation commonValServ, MessageSource msgSource,
			TrxHisService trxHistServ, AlertMessageService alertMsgServ, MenuRoleFunctionService mrfServ) {
		super();
		this.userProfileServ = userProfileServ;
		this.groupServ = groupServ;
		this.userRoleServ = userRoleServ;
		this.roleServ = roleServ;
		this.orgServ = orgServ;
		this.pwdHistServ = pwdHistServ;
		this.auth = auth;
		this.javaMailSender = javaMailSender;
		this.commonValServ = commonValServ;
		this.msgSource = msgSource;
		this.trxHistServ = trxHistServ;
		this.alertMsgServ = alertMsgServ;
		this.mrfServ = mrfServ;
	}

	@GetMapping("/base/admin/userProfile/userProfileList")
	public ModelAndView getUserProfileList(HttpServletRequest request, HttpServletResponse response) {		

		model = auth.onPageLoad(model, request);
		auth.isAuthUrl(request, response);
		mrfServ.menuRoleFunction(model, MENU_ITEM_ID, (String) model.get("loggedUser"));
		
		model.put("userProfileItem", userProfileServ.searchUserProfile("", "", "", "", "", "", "", "", "")
				.stream().filter(arg0 -> arg0.getOrgId().equals((String) model.get("loggedUserOrg")))
				.collect(Collectors.toList()));
		model.put("groupItem", groupServ.searchGroup((String) model.get("loggedUserOrg"), ""));// FSGS) Azmeer 01/03/2021 - Add data for User Group dropdown

		// FSGS) Faiz 01/03/2021 - change field value to model START
		model.put("para1", 1);
		model.put("para2", 1);
		model.put("para3", 1);
		model.put("para4", 1);
		model.put("para5", 1);
		// FSGS) Faiz 01/03/2021 - change field value to model END
		getAuthLevel(request);
		if((Boolean)model.get("authLvl2"))
			model.put("btnAddHid", false);
		else
			model.put("btnAddHid", true);

		return new ModelAndView("/base/admin/userProfile/userProfileList", model);
	}
	
	// Display search results
	@PostMapping("/base/admin/userProfile/userProfileSearch")
	public ModelAndView getSearchResult(HttpServletRequest request, @RequestParam(name = "orgName") String orgName,
			@RequestParam(name = "userId") String userId, @RequestParam(name = "userName") String userName,
			@RequestParam(name = "email") String email, @RequestParam(name = "gpName") String gpName,
			@RequestParam(name = "para1") String para1, @RequestParam(name = "para2") String para2,
			@RequestParam(name = "para3") String para3, @RequestParam(name = "para4") String para4,
			HttpSession session) {

		boolean hasError = false;

		// FSGS) Faiz 01/03/2021 - change field value to model START
		model.put("orgName", orgName);
		model.put("userId", userId);
		model.put("userName", userName);
		model.put("email", email);
		model.put("gpName", gpName);
		model.put("para1", para1);
		model.put("para2", para2);
		model.put("para3", para3);
		model.put("para4", para4);
		// FSGS) Faiz 01/03/2021 - change field value to model END

		String errorMsg = "";

		try {

			errorMsg += commonValServ.validateInputLength(orgName, 200, ORG_NAME_TXT);
			errorMsg += commonValServ.validateInputLength(userId, 20, USR_ID_TXT);
			errorMsg += commonValServ.validateInputLength(userName, 50, USR_NAME_TXT);
			errorMsg += commonValServ.validateInputLength(email, 50, EMAIL_TXT);
			errorMsg += commonValServ.validateInputLength(gpName, 100, USR_GRP_TXT);

			if (errorMsg.length() == 0) {

				// FSGS) Kent 26/2/2021 Add/changed - Add Function executed log START
				StringBuffer sb = new StringBuffer();
				sb.append("Search Criteria: ");
				sb.append("Organization Name=").append(orgName.isEmpty() ? "<ALL>" : orgName).append(", ");
				sb.append("User ID=").append(userId.isEmpty() ? "<ALL>" : userId).append(", ");
				sb.append("User Name=").append(userName.isEmpty() ? "<ALL>" : userName).append(", ");
				sb.append("Email Address=").append(email.isEmpty() ? "<ALL>" : email).append(", ");
				sb.append("User Group=").append(gpName.isEmpty() ? "<ALL>" : gpName);

				trxHistServ.addTrxHistory(new Date(), "Search User Pofile", request.getRemoteUser(),
						CommonConstants.FUNCTION_TYPE_SEARCH, "Search User Pofile",
						CommonConstants.RECORD_TYPE_ID_USER_PROFILE, sb.toString());
				// FSGS) Kent 26/2/2021 Add/changed - Add Function executed log END

				hasError = false;

				// FSGS) Hani 10/3/2021 Add/Change .trim() to search criteria START
				model.put("userProfileItem", userProfileServ.searchUserProfile(orgName.trim(), userId.trim(), userName.trim(),
						email.trim(), gpName, para1, para2, para3, para4)
						.stream().filter(arg0 -> arg0.getOrgId().equals((String) model.get("loggedUserOrg")))
						.collect(Collectors.toList()));
				// FSGS) Hani 10/3/2021 Add/Change .trim() to search criteria END
			} else
				hasError = true;

		} catch (Exception e) {

			e.printStackTrace();
			hasError = true;
			errorMsg += e.toString();

		} finally {
			if (hasError == true) {
				errorMsg += " " + msgSource.getMessage("msgFailSearchRecord", new Object[] {}, Locale.getDefault());
				model.put("error", errorMsg);
				// return back user input
				model.put("userProfileItem", userProfileServ.searchUserProfile("", "", "", "", "", "", "", "", "")
						.stream().filter(arg0 -> arg0.getOrgId().equals((String) model.get("loggedUserOrg")))
						.collect(Collectors.toList()));
			}
		}
		return new ModelAndView("/base/admin/userProfile/userProfileList", model);
	}

	// Get add form
	@GetMapping("/base/admin/userProfile/userProfileForm")
	public ModelAndView getUserProfileForm(HttpServletRequest request) {

		model = auth.onPageLoad(model, request);
		model.remove("success");
		model.remove("error");
		model.put("mode", "add");
		model.put("header", "Add User Profile");
		model.put("confirmHeader", msgSource.getMessage("cancelConfirmHeader", new Object[] {}, Locale.getDefault()));
		model.put("confirmMsg", msgSource.getMessage("cancelConfirmMsg", new Object[] {}, Locale.getDefault()));
		model.put("groupItem", groupServ.searchGroup((String) model.get("loggedUserOrg"), ""));
		model.put("roleItem", roleServ.searchUserRole("", "", "", "").stream()
				.filter(arg0 -> arg0.getOrgId().equals((String) model.get("loggedUserOrg")))
				.collect(Collectors.toList()));
		model.put("organizationItem", orgServ.searchOrganization((String) model.get("loggedUserOrg"), "", "", "3", ""));
		model.put("userProfileItem", new Usr());
		model.put("checkbox", true);
		getAuthLevel(request);

		return new ModelAndView("/base/admin/userProfile/userProfileForm", model);
	}

	// Save add form
	@PostMapping("/base/admin/userProfile/userProfileForm")
	public ModelAndView saveUserProfile(Usr usr, @RequestParam(value = "userRole") String[] list,
			HttpServletRequest request, HttpSession session) {

		String mode = model.get("mode").toString();		

		String randomPass = alphaNumericString(10);
		BCryptPasswordEncoder passwordEncoder = new BCryptPasswordEncoder();
		String encodedPassword = passwordEncoder.encode(randomPass);
		model.remove("error");
		model.remove("success");
		
		if (mode.equals("add")) {
			String errorMsg = "";
			try {
				errorMsg += commonValServ.validateUniqueUserId(usr.getUserId(), USR_ID_TXT);
				errorMsg += commonValServ.validateMandatoryInput(usr.getUserId(), USR_ID_TXT);
				errorMsg += commonValServ.validateMandatoryInput(usr.getUserName(), USR_NAME_TXT);
				errorMsg += commonValServ.validateMandatoryInput(usr.getEmail(), EMAIL_TXT);
				errorMsg += commonValServ.validateMandatoryInput(usr.getOrgId(), ORG_NAME_TXT);
				errorMsg += commonValServ.validateMandatoryInput(usr.getGroupId(), USR_GRP_TXT);
				for (int i = 0; i < list.length; i++) {
					errorMsg += commonValServ.validateMandatoryInput(list[i], USR_RL_TXT);
				}
				errorMsg += commonValServ.validateInputLength(usr.getUserId(), 20, USR_ID_TXT);
				errorMsg += commonValServ.validateInputLength(usr.getUserName(), 100, USR_NAME_TXT);
				errorMsg += commonValServ.validateInputLength(usr.getEmail(), 50, EMAIL_TXT);
				errorMsg += commonValServ.validateEmailFormat(usr.getEmail(), EMAIL_TXT);
				errorMsg += commonValServ.validateDateFormat(usr.getEffecDateFr(), EFFECT_START_TXT);
				errorMsg += commonValServ.validateDateFormat(usr.getEffecDateTo(), EFFECT_END_TXT);
				errorMsg += commonValServ.validateDateRange(usr.getEffecDateFr(), usr.getEffecDateTo(), EFFECT_START_TXT,
						EFFECT_END_TXT);

				if (errorMsg.length() == 0) {
					
					userProfileServ.addUserProfile(usr.getUserId(), usr.getUserName(), usr.getOrgId(), usr.getGroupId(),
							encodedPassword, usr.getEmail(), String.valueOf(CommonConstants.FLAG_NO),
							usr.getFailedAttemptCnt(), usr.getAlertPre(), request.getRemoteUser(), usr.getEffecDateFr(),
							usr.getEffecDateTo());

					for (int i = 0; i < list.length; i++) {
						userRoleServ.addUserRole(usr.getUserId(), list[i]);
					}

					// FSGS) Kent 26/2/2021 Add/changed - Add Function executed log START
					trxHistServ.addTrxHistory(new Date(), "Insert User Pofile", request.getRemoteUser(),
							CommonConstants.FUNCTION_TYPE_INSERT, usr.getUserId(),
							CommonConstants.RECORD_TYPE_ID_USER_PROFILE, null);
					// FSGS) Kent 26/2/2021 Add/changed - Add Function executed log END

					model.put("success", msgSource.getMessage("msgSuccessAdd", new Object[] {}, Locale.getDefault()));
					sendEmail(usr.getEmail(), usr.getUserId(), randomPass);

				} else {
					
					errorMsg += " " + msgSource.getMessage("msgFailAdd", new Object[] {}, Locale.getDefault());
					model.put("error", errorMsg);
					model.put("userProfileItem", usr); // return back user input
					return new ModelAndView("/base/admin/userProfile/userProfileForm", model);
				}							

			} catch (Exception e) {

				e.printStackTrace();
				errorMsg += e.toString();
				errorMsg += " " + msgSource.getMessage("msgFailAdd", new Object[] {}, Locale.getDefault());
				model.put("error", errorMsg);
				model.put("userProfileItem", usr); // return back user input
				return new ModelAndView("/base/admin/userProfile/userProfileForm", model);
			}

		} else if (mode.equals("view")) {

			String errorMsg = "";
			try {

				errorMsg += commonValServ.validateMandatoryInput(usr.getUserName(), USR_NAME_TXT);
				errorMsg += commonValServ.validateMandatoryInput(usr.getEmail(), EMAIL_TXT);
				errorMsg += commonValServ.validateMandatoryInput(usr.getOrgId(), ORG_NAME_TXT);
				errorMsg += commonValServ.validateMandatoryInput(usr.getGroupId(), USR_GRP_TXT);

				for (int i = 0; i < list.length; i++) {
					errorMsg += commonValServ.validateMandatoryInput(list[i], USR_RL_TXT);
				}

				errorMsg += commonValServ.validateInputLength(usr.getUserId(), 20, USR_ID_TXT);
				errorMsg += commonValServ.validateInputLength(usr.getUserName(), 50, USR_NAME_TXT);
				errorMsg += commonValServ.validateInputLength(usr.getEmail(), 50, EMAIL_TXT);
				errorMsg += commonValServ.validateEmailFormat(usr.getEmail(), EMAIL_TXT);
				errorMsg += commonValServ.validateDateFormat(usr.getEffecDateFr(), EFFECT_START_TXT);
				errorMsg += commonValServ.validateDateFormat(usr.getEffecDateTo(), EFFECT_END_TXT);
				errorMsg += commonValServ.validateDateRange(usr.getEffecDateFr(), usr.getEffecDateTo(), EFFECT_START_TXT,
						EFFECT_END_TXT);

				if (errorMsg.length() == 0) {					

					userProfileServ.updateUserProfile(usr.getUserId(), usr.getUserName(), usr.getOrgId(), usr.getGroupId(),
							usr.getEmail(), usr.getAlertPre(), request.getRemoteUser(), usr.getEffecDateFr(),
							usr.getEffecDateTo());

					userRoleServ.deleteUserRole(usr.getUserId());

					for (int i = 0; i < list.length; i++) {
						errorMsg += commonValServ.validateMandatoryInput(list[i], USR_RL_TXT);
						userRoleServ.addUserRole(usr.getUserId(), list[i]);
					}
					// FSGS) Kent 26/2/2021 Add/changed - Add Function executed log START
					trxHistServ.addTrxHistory(new Date(), "Update User Pofile", request.getRemoteUser(),
							CommonConstants.FUNCTION_TYPE_UPDATE, usr.getUserId(),
							CommonConstants.RECORD_TYPE_ID_USER_PROFILE, null);
					// FSGS) Kent 26/2/2021 Add/changed - Add Function executed log END

					model.put("userRoleItem", userRoleServ.searchUserRole(usr.getUserId()));
					model.put("roleItem", roleServ.searchListBoxUserRole(usr.getUserId()));
					model.put("success",
							msgSource.getMessage("msgSuccessUpdate", new Object[] {}, Locale.getDefault()));
					model.put("modifier", usr.getModifierId());
					
				} else {

					errorMsg += " " + msgSource.getMessage("msgFailUpdate", new Object[] {}, Locale.getDefault());
					model.put("error", errorMsg);
					// return back user input
					model.put("userProfileItem", usr);
					model.put("updateMode", "updateForm");
					return new ModelAndView("/base/admin/userProfile/userProfileForm", model);
				}

			} catch (Exception e) {

				e.printStackTrace();
				errorMsg += e.toString();
				errorMsg += " " + msgSource.getMessage("msgFailUpdate", new Object[] {}, Locale.getDefault());
				model.put("error", errorMsg);
				// return back user input
				model.put("userProfileItem", usr);
				model.put("updateMode", "updateForm");
				return new ModelAndView("/base/admin/userProfile/userProfileForm", model);
			}
		}

		model.put("userProfileItem", userProfileServ.searchUserProfile("", "", "", "", "", "", "", "", "")
				.stream().filter(arg0 -> arg0.getOrgId().equals((String) model.get("loggedUserOrg")))
				.collect(Collectors.toList()));
		return new ModelAndView("/base/admin/userProfile/userProfileList", model);
	}

	// View form
	@RequestMapping("/base/admin/userProfile/userProfileView")
	public ModelAndView getUserProfileView(@RequestParam(name = "userId") String userId, HttpServletRequest request) {
		try {
			UsrProfile usr = userProfileServ.searchUserProfile("", userId, "", "", "", "",
					String.valueOf(CommonConstants.SEARCH_OPTION_EXACT), "", "").get(0);

			// FSGS) Kent 26/2/2021 Add/changed - Add Function executed log START
			trxHistServ.addTrxHistory(new Date(), "View User Pofile", request.getRemoteUser(),
					CommonConstants.FUNCTION_TYPE_VIEW, userId, CommonConstants.RECORD_TYPE_ID_USER_PROFILE, null);
			// FSGS) Kent 26/2/2021 Add/changed - Add Function executed log END

			model.put("mode", "view");
			model.put("header", "View User Profle");
			model.remove("checkbox");
			model.put("confirmHeader", msgSource.getMessage("editConfirmHeader", new Object[] {}, Locale.getDefault()));
			model.put("confirmMsg", msgSource.getMessage("editConfirmMsg", new Object[] {}, Locale.getDefault()));
			model.put("groupItem", groupServ.searchGroup((String) model.get("loggedUserOrg"), ""));
			model.put("userRoleItem", userRoleServ.searchUserRole(userId).stream()
					.filter(arg0 -> arg0.getUserId().equals(userId)).collect(Collectors.toList()));
			model.put("roleItem", roleServ.searchListBoxUserRole(userId));
			model.put("organizationItem", orgServ.searchOrganization((String) model.get("loggedUserOrg"), "", "", "3", ""));
			model.put("resetChk", "reset");
			model.put("resetHeader",
					msgSource.getMessage("pwdResetConfirmHeader", new Object[] {}, Locale.getDefault()));
			model.put("resetMsg",
					msgSource.getMessage("pwdResetConfirmMsg", new Object[] { userId }, Locale.getDefault()));

			model.put("creator", usr.getCreatorId());
			model.put("modifier", usr.getModifierId());
			
			//getAuthLevel(request);
			//if ((Boolean) model.get("authLvl2")) {
				model.put("btnEditHid", (Boolean) model.get("hidFunctionType_2"));
				model.put("btnResetPassHid", (Boolean) model.get("hidFunctionType_2"));
				model.put("btnActionHid", (Boolean) model.get("hidFunctionType_2"));
			//} else {
			//	model.put("btnEditHid", true);
			//	model.put("btnResetPassHid", true);
			//	model.put("btnActionHid", true);
			//}

			DateFormat formatter = new SimpleDateFormat("dd/MM/yyy hh:mm:ss a");
			// Get current login user
			String loginUsr = request.getRemoteUser();
			// Search current login user's role
			List<UsrRole> usrRoleList = userRoleServ.searchUserRole(loginUsr).stream()
					.filter(arg0 -> arg0.getUserId().equals(loginUsr)).collect(Collectors.toList());

			// If role equals SUSR enable checkbox
			for (UsrRole usrList : usrRoleList) {
				if (usrList.getRoleId().equals(CommonConstants.ROLE_ID_ADM)) {
					model.put("enableChk", "enable");
				}
			}

			try {
				model.put("createdDate", formatter.format(usr.getCreatedDate()));
			} catch (Exception e) {
				model.put("createdDate", "--");
			}

			try {
				model.put("modifiedDate", formatter.format(usr.getModifiedDate()));
			} catch (Exception e) {
				model.put("modifiedDate", "--");
			}

			if (usr.getDisabledFlag().equals(String.valueOf(CommonConstants.FLAG_NO))
					|| usr.getDisabledFlag() == String.valueOf(CommonConstants.FLAG_NO)) {
				model.put("checkbox", false);
				model.remove("unlockChk");
				
				for (UsrRole usrList : usrRoleList) {

					if (usrList.getRoleId().equals(CommonConstants.ROLE_ID_ADM)) {
						model.put("lockChk", "lock");
						model.put("lockHeader",
								msgSource.getMessage("lockConfirmHeader", new Object[] {}, Locale.getDefault()));
						model.put("lockMsg",
								msgSource.getMessage("lockConfirmMsg", new Object[] { userId }, Locale.getDefault()));
					}
				}

			} else {
				model.put("checkbox", true);
				model.remove("lockChk");

				for (UsrRole usrList : usrRoleList) {

					if (usrList.getRoleId().equals(CommonConstants.ROLE_ID_ADM)) {
						model.put("unlockChk", "unlock");
						model.put("unlockHeader",
								msgSource.getMessage("unlockConfirmHeader", new Object[] {}, Locale.getDefault()));
						model.put("unlockMsg",
								msgSource.getMessage("unlockConfirmMsg", new Object[] { userId }, Locale.getDefault()));
					}
				}
			}

			model.put("userProfileItem", usr);
		} catch (Exception e) {
			return new ModelAndView("/base/admin/userProfile/userProfileList", model);
		}

		return new ModelAndView("/base/admin/userProfile/userProfileForm", model);
	}

	@RequestMapping("/base/admin/userProfile/userProfileListDel")
	public ModelAndView deleteOrganizationBatch(HttpServletRequest request,
			@RequestParam(value = "tableRow") String[] check, HttpSession session) {

		try {
			for (int i = 0; i < check.length; i++) {
				// FSGS) Kent 26/2/2021 Add/changed - Add Function executed log START
				trxHistServ.addTrxHistory(new Date(), "Delete User Pofile", request.getRemoteUser(),
						CommonConstants.FUNCTION_TYPE_DELETE, check[i], CommonConstants.RECORD_TYPE_ID_USER_PROFILE,
						null);
				// FSGS) Kent 26/2/2021 Add/changed - Add Function executed log END
				userProfileServ.deleteUserProfile(check[i]);
				userRoleServ.deleteUserRole(check[i]);
			}

			model.put("success", msgSource.getMessage("msgSuccessDelete", new Object[] {}, Locale.getDefault()));

		} catch (Exception e) {
			model.put("error", msgSource.getMessage("msgFailDelete", new Object[] {}, Locale.getDefault()));
		}

		model.put("userProfileItem", userProfileServ.searchUserProfile("", "", "", "", "", "", "", "", "")
				.stream().filter(arg0 -> arg0.getOrgId().equals((String) model.get("loggedUserOrg")))
				.collect(Collectors.toList()));

		return new ModelAndView(("/base/admin/userProfile/userProfileList"), model);

	}

	private void sendEmail(String email, String userId, String password) {
		String content = "User password for " + userId + " .\n" + "Kindly use this password to login pfc\n" + password
				+ "\n" + "Thank you.";

		SimpleMailMessage msg = new SimpleMailMessage();
		msg.setTo(email);
		msg.setSubject("pfc User Password");
		msg.setText(content);

		javaMailSender.send(msg);
	}

	// FSGS) Faiz 03/03/2021 - add send email for unlock - START
	private void sendUserUnlockEmail(Usr usr) {

		AlertMessage am = alertMsgServ.searchAlertById(AlertDefEnum.USER_ACTIVATED.strValue());

		if (am != null && usr != null) {

			String content = am.getDescription().replace("[@UserID]", usr.getUserId()).replace("[@UserName]",
					usr.getUserName());

			SimpleMailMessage msg = new SimpleMailMessage();
			msg.setTo(usr.getEmail());
			msg.setSubject(am.getSubject());
			msg.setText(content);

			javaMailSender.send(msg);
		}
	}
	// FSGS) Faiz 03/03/2021 - add send email for unlock - END

	private static String alphaNumericString(int len) {
		String AB = "0123456789ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz";
		SecureRandom rnd = new SecureRandom();

		StringBuilder sb = new StringBuilder(len);
		for (int i = 0; i < len; i++) {
			sb.append(AB.charAt(rnd.nextInt(AB.length())));
		}
		return sb.toString();
	}

	@PostMapping(value = "/base/admin/userProfile/userProfileForm", params = "manfAction=reset")
	public ModelAndView resetAccount(@RequestParam(name = "userId") String usrID,
			@RequestParam(name = "email") String email, HttpServletRequest request, HttpSession session) {

		boolean hasError = false;
		UsrProfile usr = userProfileServ.searchUserProfile("", usrID, "", "", "", "",
				String.valueOf(CommonConstants.SEARCH_OPTION_EXACT), "", "").get(0);

		String errorMsg = "";
		String randomPass = alphaNumericString(10);
		BCryptPasswordEncoder passwordEncoder = new BCryptPasswordEncoder();
		String encodedPassword = passwordEncoder.encode(randomPass);

		try {

			userProfileServ.resetPassword(usrID, encodedPassword, request.getRemoteUser());
			pwdHistServ.insertPassHis(usrID, usr.getPassword());
			
			// FSGS) Kent 26/2/2021 Add/changed - Add Function executed log START
			trxHistServ.addTrxHistory(new Date(), "Reset User Password", request.getRemoteUser(),
					CommonConstants.FUNCTION_TYPE_UPDATE, usrID, CommonConstants.RECORD_TYPE_ID_USER_PROFILE, null);
			// FSGS) Kent 26/2/2021 Add/changed - Add Function executed log END
			
			//logger.debug("reset() usrID={}, newPass={}", usrID, randomPass);
			
			sendEmail(email, usrID, randomPass);

		} catch (Exception e) {

			e.printStackTrace();
			hasError = true;
			errorMsg += e.toString();

		} finally {
			if (hasError == true) {
				errorMsg += " " + msgSource.getMessage("msgFailPwdReset", new Object[] {}, Locale.getDefault());
				model.put("error", errorMsg);
			} else {
				model.put("success", msgSource.getMessage("msgSuccessPwdReset", new Object[] {}, Locale.getDefault()));
				getUserProfileView(usrID, request);
			}
		}

		return new ModelAndView("/base/admin/userProfile/userProfileForm", model);
	}

	@PostMapping(value = "/base/admin/userProfile/userProfileForm", params = "manfAction=unlock")
	public ModelAndView unlockAccount(@Valid Usr usr, @RequestParam(name = "userId") String usrID,
			HttpServletRequest request, HttpSession session) {

		String message = "";
		boolean hasError = false;

		try {
			userProfileServ.lockOrUnlockAccount(usrID, request.getRemoteUser(), String.valueOf(CommonConstants.FLAG_NO));
			// FSGS) Kent 26/2/2021 Add/changed - Add Function executed log START
			trxHistServ.addTrxHistory(new Date(), "Unlock User Profile", request.getRemoteUser(),
					CommonConstants.FUNCTION_TYPE_UPDATE, usrID, CommonConstants.RECORD_TYPE_ID_USER_PROFILE, null);
			// FSGS) Kent 26/2/2021 Add/changed - Add Function executed log END
			
			//logger.debug("unlock() usrID={}, newPass={}", usrID);
			
			sendUserUnlockEmail(usr); // FSGS) Faiz 03/03/2021 - add send email for unlock

		} catch (Exception e) {

			e.printStackTrace();
			hasError = true;
			message += e.toString();

		} finally {
			if (hasError == true) {
				message += " " + msgSource.getMessage("msgFailUnlock", new Object[] {}, Locale.getDefault());
				model.put("error", message);
			} else {
				message += msgSource.getMessage("msgSuccessUnlock", new Object[] {}, Locale.getDefault());
				model.put("success", message);
				getUserProfileView(usrID, request);
			}
			//logger.debug("unlockAccount() message={}", message);
		}

		return new ModelAndView("/base/admin/userProfile/userProfileForm", model);
	}
	
	@PostMapping(value = "/base/admin/userProfile/userProfileForm", params = "manfAction=lock")
	public ModelAndView lockAccount(@Valid Usr usr, @RequestParam(name = "userId") String usrID,
			HttpServletRequest request, HttpSession session) {

		String message = "";
		boolean hasError = false;

		try {
			userProfileServ.lockOrUnlockAccount(usrID, request.getRemoteUser(), String.valueOf(CommonConstants.FLAG_YES));
			trxHistServ.addTrxHistory(new Date(), "Lock User Profile", request.getRemoteUser(),
					CommonConstants.FUNCTION_TYPE_UPDATE, usrID, CommonConstants.RECORD_TYPE_ID_USER_PROFILE, null);

		} catch (Exception e) {

			e.printStackTrace();
			hasError = true;
			message += e.toString();

		} finally {
			if (hasError == true) {
				message += " " + msgSource.getMessage("msgFailLock", new Object[] {}, Locale.getDefault());
				model.put("error", message);
			} else {
				message += msgSource.getMessage("msgSuccessLock", new Object[] {}, Locale.getDefault());
				model.put("success", message);
				getUserProfileView(usrID, request);
			}
			//logger.debug("lockAccount() message={}", message);
		}

		return new ModelAndView("/base/admin/userProfile/userProfileForm", model);
	}
	
	private void getAuthLevel(HttpServletRequest request) {
		boolean authLvl1 = false;
		boolean authLvl2 = false;
		List<UsrRole> usrRoleList = userRoleServ.searchUserRole(request.getRemoteUser());
		for (UsrRole usrRole : usrRoleList) {
			if (usrRole.getRoleId().equals(CommonConstants.ROLE_ID_CHECKER)
					|| usrRole.getRoleId().equals(CommonConstants.ROLE_ID_SUPERUSER)
					|| usrRole.getRoleId().equals(CommonConstants.ROLE_ID_HOD)) {
				authLvl2 = true;
			}

			if (usrRole.getRoleId().equals(CommonConstants.ROLE_ID_MAKER)) {
				authLvl1 = true;
			}
		}
		
		model.put("authLvl1", authLvl1);
		model.put("authLvl2", authLvl2);
	}
}
