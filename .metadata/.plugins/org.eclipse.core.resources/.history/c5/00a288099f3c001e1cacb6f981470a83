package com.fms.pfc.common;

import java.util.List;
import java.util.Locale;
import java.util.Objects;

import javax.mail.MessagingException;
import javax.mail.internet.MimeMessage;

import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.context.MessageSource;
import org.springframework.mail.SimpleMailMessage;
import org.springframework.mail.javamail.JavaMailSender;
import org.springframework.mail.javamail.MimeMessageHelper;
import org.springframework.stereotype.Service;

import com.fms.pfc.domain.model.UsrProfile;
import com.fms.pfc.domain.model.main.OnDemandSearch;
import com.fms.pfc.service.api.base.AlertService;

@Service
public class SendAlertAndEmailService {
	private static final Logger logger = LoggerFactory.getLogger(SendAlertAndEmailService.class);

	private AlertService alertServ;
	private JavaMailSender javaMailSender;
	private MessageSource msgSource;

	private static String LBL_HPL = "";
	private static String LBL_G2LOT = "";
	private static String LBL_FILENAME = "";
	private static String LBL_FILESIZE = "";
	private static String LBL_FILEPATH = "";
	private static String LBL_ALERTTYPE = "";
	private static String LBL_FROMDATE = "";
	private static String LBL_TODATE = "";

	@Autowired
	public SendAlertAndEmailService(AlertService alertServ, JavaMailSender javaMailSender, MessageSource msgSource) {
		super();
		this.alertServ = alertServ;
		this.javaMailSender = javaMailSender;
		this.msgSource = msgSource;
		
		getAllLabels();
	}

	public void sendAlertAndEmail(String systemEmail, String lot, UsrProfile usr, String subject, String content,
			boolean isHtml) {
		if (usr.getAlertPre() == CommonConstants.MESSAGE_PREF_EMAIL) {

			sendEmail(usr.getEmail(), subject, content, null, isHtml);
		} else if (usr.getAlertPre() == CommonConstants.MESSAGE_PREF_NOTIFICATION) {

			alertServ.addAlert(subject, content, systemEmail, lot, CommonConstants.RECORD_TYPE_ID_ON_DEMAND,
					usr.getUserId());

		} else if (usr.getAlertPre() == CommonConstants.MESSAGE_PREF_EMAIL_NOTIFICATION) {

			alertServ.addAlert(subject, content, systemEmail, lot, CommonConstants.RECORD_TYPE_ID_ON_DEMAND,
					usr.getUserId());
			sendEmail(usr.getEmail(), subject, content, null, isHtml);
		}
	}

	public void sendEmail(String to, String subject, String content, String[] cc, boolean isHtml) {
		if (!isHtml) {
			SimpleMailMessage msg = new SimpleMailMessage();
			msg.setTo(to);
			msg.setSubject(subject);
			msg.setText(content);
			javaMailSender.send(msg);
		} else {
			sendEmailHtml(to, subject, content, cc);
		}
	}

	public void sendEmailHtml(String sendTo, String subject, String htmlMsg, String[] cc) {
		MimeMessage message = javaMailSender.createMimeMessage();
		try {
			MimeMessageHelper helper = new MimeMessageHelper(message, false, "utf-8");
			message.setContent(htmlMsg, "text/html");
			helper.setTo(sendTo);
			//helper.setCc(cc);
			helper.setSubject(subject);
			javaMailSender.send(message);
		} catch (MessagingException e) {
			logger.error(e.toString());
		}
	}

	public String genEmailBody(List<OnDemandSearch> searchList) {
		StringBuffer stringBuffer = generateCommonHtmlHead();
		int rowno = 1;
		for (OnDemandSearch ods : searchList) {
			generateTdData(stringBuffer, rowno, ods);
			rowno++;
		}
		generateCommonFooter(stringBuffer);
		return stringBuffer.toString();
	}

	private StringBuffer generateCommonHtmlHead() {
		StringBuffer stringBuffer = new StringBuffer();
		return stringBuffer.append("<head>").append("</head>").append("<body>").append("<table border=1>")
				.append("<tr>").append("<th>No.</th>").append("<th>").append(LBL_HPL).append("</th>").append("<th>").append(LBL_G2LOT)
				.append("</th>").append("<th>").append(LBL_FILENAME).append("</th>").append("<th>").append(LBL_FILESIZE)
				.append(" (KB) ").append("</th>").append("<th>").append(LBL_FILEPATH).append("</th>").append("<th>")
				.append(LBL_ALERTTYPE).append("</th>").append("</tr>");
	}

	private void generateCommonFooter(StringBuffer stringBuffer) {
		stringBuffer.append("</table></body>");
	}

	private void generateTdData(StringBuffer stringBuffer, int rowno, OnDemandSearch ods) {
		stringBuffer.append("<tr>");
		stringBuffer.append("<td align ='right'>").append(rowno).append("</td>");
		stringBuffer.append("<td align ='center'>").append(ods.getHpl()).append("</td>");
		stringBuffer.append("<td>").append(ods.getLot()).append("</td>");
		stringBuffer.append("<td>").append(ods.getFileName()).append("</td>");
		stringBuffer.append("<td align ='center'>").append(ods.getFileSize()).append("</td>");
		stringBuffer.append("<td>").append(ods.getFilePath()).append("</td>");
		stringBuffer.append("<td>").append(ods.getAlert()).append("</td>");
		stringBuffer.append("</tr>");
	}

	private void getAllLabels() {
		LBL_HPL = msgSource.getMessage("lblHpl", null, Locale.getDefault());
		LBL_G2LOT = msgSource.getMessage("lblG2LotNo", null, Locale.getDefault());
		LBL_FILENAME = msgSource.getMessage("lblFileName", null, Locale.getDefault());
		LBL_FILESIZE = msgSource.getMessage("lblFileSize", null, Locale.getDefault());
		LBL_FILEPATH = msgSource.getMessage("lblFilePath", null, Locale.getDefault());
		LBL_ALERTTYPE = msgSource.getMessage("lblAlertType", null, Locale.getDefault());
		LBL_FROMDATE = msgSource.getMessage("lblFromDate", null, Locale.getDefault());
		LBL_TODATE = msgSource.getMessage("lblToDate", null, Locale.getDefault());
	}
	
	private String convertToEmpty(String obj) {
		return Objects.isNull(obj) ? "" : obj;
	}
}
