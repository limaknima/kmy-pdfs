package com.fms.pfc.controller.main;

import java.text.SimpleDateFormat;
import java.util.Date;
import java.util.HashMap;
import java.util.List;
import java.util.Locale;
import java.util.Map;
import java.util.Objects;
import java.util.stream.Collectors;

import javax.servlet.http.HttpServletRequest;
import javax.servlet.http.HttpServletResponse;
import javax.servlet.http.HttpSession;
import javax.validation.Valid;

import org.apache.commons.lang.StringUtils;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.context.MessageSource;
import org.springframework.stereotype.Controller;
import org.springframework.ui.ModelMap;
import org.springframework.validation.BindingResult;
import org.springframework.web.bind.annotation.GetMapping;
import org.springframework.web.bind.annotation.PostMapping;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestParam;
import org.springframework.web.context.annotation.SessionScope;
import org.springframework.web.servlet.ModelAndView;

import com.fms.pfc.common.Authority;
import com.fms.pfc.common.CommonConstants;
import com.fms.pfc.domain.dto.main.FileTypeSzDto;
import com.fms.pfc.service.api.base.MenuRoleFunctionService;
import com.fms.pfc.service.api.base.TrxHisService;
import com.fms.pfc.service.api.main.FileTypeSzService;
import com.fms.pfc.service.api.main.G2LotViewService;
import com.fms.pfc.service.api.main.HplService;
import com.fms.pfc.validation.common.CommonValidation;

@Controller
@SessionScope
public class FileTypeSzController {
	private static final Logger logger = LoggerFactory.getLogger(FileTypeSzController.class);

	private Authority auth;
	private CommonValidation commonValServ;
	private MessageSource msgSource;
	private FileTypeSzService fileTypeSzServ;
	private TrxHisService trxHistServ;
	private HplService hplServ;
	private G2LotViewService g2LotServ;
	private MenuRoleFunctionService mrfServ;
	
	private Map<String, Object> model = new HashMap<String, Object>();
	private String screenMode = "";

	private static String HPL_TXT = "";
	private static String FILETYPE_TXT = "";
	private static String FILESZ_TXT = "";
	private static String MIN_TXT = "";
	private static String MAX_TXT = "";
	private static String MODULE_NAME = "";
	private static final int MENU_ITEM_ID = 810;
	private static final String ERR_MSG_UNIQUE = " already exist ";
	private static final String breakline = ".<br />";

	@Autowired
	public FileTypeSzController(Authority auth, CommonValidation commonValServ, MessageSource msgSource,
			FileTypeSzService fileTypeSzServ, TrxHisService trxHistServ, HplService hplServ, G2LotViewService g2LotServ, MenuRoleFunctionService mrfServ) {
		super();
		this.auth = auth;
		this.commonValServ = commonValServ;
		this.msgSource = msgSource;
		this.fileTypeSzServ = fileTypeSzServ;
		this.trxHistServ = trxHistServ;
		this.hplServ = hplServ;
		this.g2LotServ = g2LotServ;
		this.mrfServ = mrfServ;

		getAllLabels();
	}

	/**
	 * Display initial screen
	 * 
	 * @param request
	 * @param response
	 * @return
	 */
	@GetMapping("/main/pfc/fileTypeSzList")
	public ModelAndView initListing(HttpServletRequest request, HttpServletResponse response) {

		removeAlert(model);
		model = auth.onPageLoad(model, request);
		auth.isAuthUrl(request, response);
		mrfServ.menuRoleFunction(model, MENU_ITEM_ID, (String) model.get("loggedUser"));
		
		filter(true);
		model.put("ftItems", fileTypeSzServ.findFileTypeItems());
		
		return new ModelAndView("/main/pfc/fileTypeSzList", model);
	}
	
	private void filter(boolean init) {
		boolean isAdmin = (Boolean) model.get("isAdmin");
		String grp = (String) model.get("loggedUserGrp");
		
		if (init) {
			// check if user is not admin, do filtering
			if (!isAdmin) {
				model.put("hplItems",
						g2LotServ.hplList().stream().filter(arg0 -> arg0.equals(grp)).collect(Collectors.toList()));
				model.put("fileTypeSzAllItems", fileTypeSzServ.findAllDto().stream().filter(arg0 -> arg0.getHpl().equals(grp)).collect(Collectors.toList()));
			} else {
				// if user is admin, remove filter
				model.put("hplItems", g2LotServ.hplList());
				model.put("fileTypeSzAllItems", fileTypeSzServ.findAllDto());
			}

		} else {
			// check if user is not admin, do filtering
			if (!isAdmin) {

			} else {
				// if user is admin, remove filter
			}
		}
		
	}

	/**
	 * View form
	 * 
	 * @param request
	 * @param ltContId
	 * @return
	 */
	@RequestMapping("/main/pfc/fileTypeSzFormView")
	public ModelAndView viewForm(HttpServletRequest request, @RequestParam(name = "pkFtypeId") Integer pkFtypeId) {

		logger.debug("viewForm ()");

		removeAlert(model);

		FileTypeSzDto dto = fileTypeSzServ.findDtoById(pkFtypeId);
		trxHistServ.addTrxHistory(new Date(), "View " + MODULE_NAME, request.getRemoteUser(),
				CommonConstants.FUNCTION_TYPE_VIEW, dto.getPkFtypeId().toString(),
				CommonConstants.RECORD_TYPE_ID_FILE_TYPE_SZ, null);

		// Set mode
		screenMode = CommonConstants.SCREEN_MODE_VIEW;
		model.put("mode", screenMode);
		model.put("btnSaveSts", true);

		// Set form header
		model.put("header", "View " + MODULE_NAME);

		// Set confirmation message
		model.put("confirmHeader", "Edit cancellation");
		model.put("confirmMsg", "Do you want to cancel Edit this record ?");

		// Put model to HTML
		if (dto != null) {

			model.put("pkFtypeId", dto.getPkFtypeId());
			model.put("fileTypeSzItem", dto);
			model.put("fileTypeSzItemCurrItem", dto);

			logger.debug("viewForm() ftype {}", dto.getFileType());

			model.put("createdUser", dto.getCreatorId());
			model.put("modifiedUser", dto.getModifierId());

			SimpleDateFormat formatter = new SimpleDateFormat("dd/MM/yyy hh:mm:ss a");
			try {
				String createdInfo = "Created by " + dto.getCreatorId() + " on "
						+ formatter.format(dto.getCreatedDatetime());
				model.put("createdInfo", createdInfo);
			} catch (Exception e) {
			}

			String modifiedInfo = "";
			try {
				modifiedInfo = "Modified by " + dto.getModifierId() + " on "
						+ formatter.format(dto.getModifiedDatetime());
			} catch (Exception e) {
				modifiedInfo = "Modified by --";
			}
			model.put("modifiedInfo", modifiedInfo);
		}

		return new ModelAndView("/main/pfc/fileTypeSzForm", model);
	}

	/**
	 * Load add form
	 * 
	 * @param request
	 * @return
	 */
	@GetMapping("/main/pfc/fileTypeSzForm")
	public ModelAndView loadNewForm(HttpServletRequest request) {

		logger.debug("loadNewForm ()");

		removeAlert(model);

		// Set mode
		screenMode = CommonConstants.SCREEN_MODE_ADD;
		model.put("mode", screenMode);

		// Set fields
		model.put("fileTypeSzItem", new FileTypeSzDto());
		model.put("ftItems", fileTypeSzServ.findFileTypeItems());
		model.put("hplItems", g2LotServ.hplList());

		// Set form header
		model.put("header", "Add " + MODULE_NAME);
		// Set confirmation message
		model.put("confirmHeader", "Cancel confirmation");
		model.put("confirmMsg", "Do you want to cancel this record ?");

		model.put("btnEdit", true);
		model.put("btnSaveSts", false);
		model.put("btnAction", false);
		model.put("btnSave", "Save");

		manageListButton(false, true, true, model);

		return new ModelAndView("/main/pfc/fileTypeSzForm", model);
	}

	/**
	 * Save form
	 * 
	 * @param dto
	 * @param request
	 * @param bindingResult
	 * @param session
	 * @return
	 * @throws Exception
	 */
	@PostMapping(value = "/main/pfc/fileTypeSzFormSave", params = "action=save")
	public ModelAndView saveForm(@Valid FileTypeSzDto dto, HttpServletRequest request, BindingResult bindingResult,
			HttpSession session) throws Exception {

		logger.debug("saveForm ()");

		removeAlert(model);
		String mode = screenMode;

		model.put("fileTypeSzItem", dto);

		String errorMsg = validateForm(dto);

		if (errorMsg.length() != 0) {
			model.put("error", errorMsg);
			model.remove("success");
			model.put("fileTypeSzItem", dto);

			if (mode.equals(CommonConstants.SCREEN_MODE_EDIT)) {
				screenMode = CommonConstants.SCREEN_MODE_EDIT;
				// Set mode to HTML header
				model.put("mode", screenMode);
				model.put("header", "Edit " + MODULE_NAME);
				// Set confirmation message
				model.put("confirmHeader", "Edit cancellation");
				model.put("confirmMsg", "Do you want to cancel edit this record ?");
			}
			return new ModelAndView("/main/pfc/fileTypeSzForm", model);
		}

		if (mode.equals(CommonConstants.SCREEN_MODE_ADD)) {

			try {
				// If no error proceed to save add form
				// Add form
				Integer result = fileTypeSzServ.save(dto, request.getRemoteUser());

				// Print add success
				model.put("success", "Record added successfully.");
				model.remove("error");
				model.put("fileTypeSzItem", new FileTypeSzDto());

				trxHistServ.addTrxHistory(new Date(), "Insert " + MODULE_NAME, request.getRemoteUser(),
						CommonConstants.FUNCTION_TYPE_INSERT, result != null ? result.toString() : "",
						CommonConstants.RECORD_TYPE_ID_FILE_TYPE_SZ, null);

			} catch (Exception e) {
				// Print DB exception
				e.printStackTrace();
				model.put("error", "Record failed to be added.");
				model.remove("success");
			}

		} else if (mode.equals(CommonConstants.SCREEN_MODE_EDIT)) {
			// Set mode to HTML header
			screenMode = CommonConstants.SCREEN_MODE_VIEW;
			model.put("mode", screenMode);
			model.put("header", MODULE_NAME);

			try {
				// Update form
				// ltServ.saveLetterConf((int) model.get("ltContId"), dto.getLtId(),
				Integer result = fileTypeSzServ.save(dto, request.getRemoteUser());

				// Print update success
				model.put("success", "Record updated successfully.");

				trxHistServ.addTrxHistory(new Date(), "Update " + MODULE_NAME, request.getRemoteUser(),
						CommonConstants.FUNCTION_TYPE_UPDATE, result != null ? result.toString() : "",
						CommonConstants.RECORD_TYPE_ID_FILE_TYPE_SZ, null);

			} catch (Exception e) {
				// Print DB exception
				e.printStackTrace();
				model.put("error", "Record failed to update.");
				model.remove("success");
			}
		}

		model.put("btnEdit", false);
		model.put("fileTypeSzAllItems", fileTypeSzServ.findAllDto());

		return new ModelAndView("/main/pfc/fileTypeSzList", model);
	}

	/**
	 * Construct error message based on validation result
	 * 
	 * @param dto
	 * @return
	 */
	private String validateForm(FileTypeSzDto dto) {
		String errorMsg = "";
		errorMsg += commonValServ.validateMandatoryInput(dto.getHpl(), HPL_TXT);
		errorMsg += commonValServ.validateMandatoryInput(dto.getFileType(), FILETYPE_TXT);
		errorMsg += commonValServ.validateMandatoryInput(dto.getMinSize() == null ? "" : dto.getMinSize().toString(),
				MIN_TXT);
		errorMsg += commonValServ.validateMandatoryInput(dto.getMaxSize() == null ? "" : dto.getMaxSize().toString(),
				MAX_TXT);

		if (screenMode == CommonConstants.SCREEN_MODE_ADD) {
			errorMsg += validateDuplicate(dto.getHpl(), dto.getFileType());
		} else {

			if (null != model.get("fileTypeSzItemCurrItem")) {
				FileTypeSzDto currDto = (FileTypeSzDto) model.get("fileTypeSzItemCurrItem");

				// logger.debug("validateForm cur name=" + currDto.getLtName() + "; new name=" +
				// dto.getLtName());

				if (!StringUtils.equals(currDto.getHpl(), dto.getHpl())) {
					errorMsg += validateDuplicate(dto.getHpl(), dto.getFileType());
				}

				if (!StringUtils.equalsIgnoreCase(currDto.getFileType(), dto.getFileType())) {
					// check if current name value modified
					errorMsg += validateDuplicate(dto.getHpl(), dto.getFileType());

				}
			}
		}

		return errorMsg;
	}

	private String validateDuplicate(String hpl, String fileType) {
		List<FileTypeSzDto> dtos = fileTypeSzServ.findAllDto();
		dtos = dtos.stream()
				.filter(arg0 -> (arg0.getHpl() == hpl && StringUtils.equals(arg0.getFileType(), fileType)))
				.collect(Collectors.toList());
		return !dtos.isEmpty() ? "Config for HPL and File Type " + ERR_MSG_UNIQUE : "";
	}

	/**
	 * Delete item
	 * 
	 * @param request
	 * @param check
	 * @param session
	 * @return
	 */
	@RequestMapping("/main/pfc/fileTypeSzFormDel")
	public ModelAndView deleteBatch(HttpServletRequest request, @RequestParam(value = "tableRow") String[] check,
			HttpSession session) {

		model.remove("error");
		model.remove("success");
		try {
			// Delete form
			for (int i = 0; i < check.length; i++) {

//				if (1==1) {
//					// Print delete failed
//					model.put("error", "Letter Content is in used and it is not allow to delete from the system.");
//				} else {
				fileTypeSzServ.delete(Integer.parseInt(check[i]));
				// Print delete success`
				model.put("success", msgSource.getMessage("msgSuccessDelete", new Object[] {}, Locale.getDefault()));
				model.remove("error");

				trxHistServ.addTrxHistory(new Date(), "Delete " + MODULE_NAME, request.getRemoteUser(),
						CommonConstants.FUNCTION_TYPE_DELETE, check[i], CommonConstants.RECORD_TYPE_ID_FILE_TYPE_SZ,
						null);
//				}
			}

		} catch (Exception e) {
			// Print DB exception
			model.put("error", msgSource.getMessage("msgFailDelete", new Object[] {}, Locale.getDefault()));
			model.remove("success");
			e.printStackTrace();
		}

		model.put("fileTypeSzAllItems", fileTypeSzServ.findAllDto());

		return new ModelAndView(("/main/pfc/fileTypeSzList"), model);
	}

	/**
	 * Do search
	 * 
	 * @param prName
	 * @param ltType
	 * @param prNameExp
	 * @param session
	 * @return
	 */
	@PostMapping("/main/pfc/fileTypeSzSearch")
	public ModelAndView search(HttpServletRequest request, @RequestParam(name = "hpl") String hpl,
			HttpSession session) {

		logger.debug("doSearch() hpl={}",hpl);

		boolean hasError = false;

		removeAlert(model);
		String errorMsg = "";

		model.put("hpl", hpl);

		try {
			if (errorMsg.length() == 0) {

				List<FileTypeSzDto> items = fileTypeSzServ.searchByCriteria(hpl);
				model.put("fileTypeSzAllItems", items);

				StringBuffer sb = new StringBuffer();
				sb.append("Search Criteria: ");
				sb.append(HPL_TXT).append("=")
						.append(StringUtils.isEmpty(hpl) ? "<ALL>" : hpl);

				trxHistServ.addTrxHistory(new Date(), "Search " + MODULE_NAME, request.getRemoteUser(),
						CommonConstants.FUNCTION_TYPE_SEARCH, "Search " + MODULE_NAME,
						CommonConstants.RECORD_TYPE_ID_FILE_TYPE_SZ, sb.toString());

			} else {
				hasError = true;
			}

		} catch (Exception e) {
			e.printStackTrace();
			hasError = true;
			errorMsg += "Failed to get record.";
			errorMsg += e.toString();

		} finally {
			if (hasError == true) {
				model.put("error", errorMsg);
				model.remove("success");
				// return back user input
				// model.put("hplAllItems", hplServ.searchByCriteria("", "", "", ""));
			}
		}

		return new ModelAndView("/main/pfc/fileTypeSzList", model);
	}

	@PostMapping(value = "/main/pfc/fileTypeSzFormSave", params = "action=edit")
	public ModelAndView editForm(HttpServletRequest request, HttpSession session) {

		logger.debug("editForm ()");

		screenMode = CommonConstants.SCREEN_MODE_EDIT;
		model.put("mode", screenMode);
		manageListButton(false, true, true, model);
		model.put("btnEdit", true);
		model.put("btnSaveSts", false);
		model.put("btnSave", "Save");
		model.put("header", "Edit " + MODULE_NAME);
		model.remove("success");
		model.remove("error");
		clearListForm(model);

		return new ModelAndView("/main/pfc/fileTypeSzForm", model);
	}

	@Deprecated
	@SuppressWarnings("unchecked")
	@PostMapping(value = "/main/pfc/fileTypeSzFormSave", params = "action=add")
	public ModelAndView addToList(HttpServletRequest request, FileTypeSzDto ftsDto,
			@RequestParam(name = "hplId", required = false) Integer hplId,
			@RequestParam(name = "fileType", required = false) String fileType,
			@RequestParam(name = "minSize", required = false) Integer minSize,
			@RequestParam(name = "maxSize", required = false) Integer maxSize, HttpSession session) {

		model.remove("error");
		List<FileTypeSzDto> fileTypeSzAllItems = (List<FileTypeSzDto>) model.get("fileTypeSzAllItems");

		holdValue(ftsDto, model, fileType, hplId, fileType, minSize, maxSize);

		// validation
		{
			String errorMsg = "";

			if ((Objects.isNull(hplId) || hplId == 0) || StringUtils.isEmpty(fileType)
					|| (Objects.isNull(minSize) || minSize == 0) || (Objects.isNull(maxSize) || maxSize == 0)) {
				errorMsg += "Please key in " + HPL_TXT + ", " + FILETYPE_TXT + ", " + MIN_TXT + ", and " + MAX_TXT
						+ ". ";
				model.put("error", errorMsg);
				model.remove("success");
				return new ModelAndView("/main/pfc/fileTypeSzList", model);
			}

			// if hplModel duplicate
			List<FileTypeSzDto> checkList = fileTypeSzAllItems;
			for (FileTypeSzDto dto : checkList) {
				if (dto.getFkHplId() == hplId && dto.getFileType() == fileType) {
					logger.debug("addToList() loop id={},fileType={}" + hplId, fileType);
					errorMsg += "Record for " + hplId + ERR_MSG_UNIQUE;
					model.put("error", errorMsg);
					model.remove("success");
					return new ModelAndView("/main/pfc/fileTypeSzList", model);
				}
			}
		}

		int row = fileTypeSzAllItems.size();
		FileTypeSzDto dto = new FileTypeSzDto();
		dto.setFkHplId(hplId);
		dto.setFileType(fileType);
		dto.setMinSize(minSize);
		dto.setMaxSize(maxSize);
		dto.setRowNo(row);
		dto.setIndicator("new");
		fileTypeSzAllItems.add(dto);

		model.put("fileTypeSzAllItems", fileTypeSzAllItems);
		manageListButton(false, true, true, model);
		clearListForm(model);

		return new ModelAndView("/main/pfc/fileTypeSzList", model);
	}

	@Deprecated
	@SuppressWarnings("unchecked")
	@PostMapping(value = "/main/pfc/fileTypeSzFormSave", params = "action=delete")
	public ModelAndView deleteFromList(HttpServletRequest request, FileTypeSzDto ftsDto,
			@RequestParam(name = "rowNo") int rowNo, @RequestParam(name = "hplId", required = false) Integer hplId,
			@RequestParam(name = "fileType", required = false) String fileType,
			@RequestParam(name = "minSize", required = false) Integer minSize,
			@RequestParam(name = "maxSize", required = false) Integer maxSize, HttpSession session) {

		logger.debug("deleteFromList() ... ");

		holdValue(ftsDto, model, fileType, hplId, fileType, minSize, maxSize);

		List<FileTypeSzDto> fileTypeSzAllItems = (List<FileTypeSzDto>) model.get("fileTypeSzAllItems");
		fileTypeSzAllItems.remove(rowNo);

		int reDoRowNo = 0;
		for (int row = 0; row < fileTypeSzAllItems.size(); row++) {
			fileTypeSzAllItems.get(row).setRowNo(reDoRowNo);
			reDoRowNo++;
		}

		model.put("fileTypeSzAllItems", fileTypeSzAllItems);
		manageListButton(false, true, true, model);
		clearListForm(model);

		return new ModelAndView("/main/pfc/fileTypeSzList", model);
	}

	@Deprecated
	@SuppressWarnings("unchecked")
	@PostMapping(value = "/main/pfc/fileTypeSzFormSave", params = "action=update")
	public ModelAndView updateToList(HttpServletRequest request, FileTypeSzDto ftsDto,
			@RequestParam(name = "rowNo") int rowNo, @RequestParam(name = "hplId", required = false) Integer hplId,
			@RequestParam(name = "fileType", required = false) String fileType,
			@RequestParam(name = "minSize", required = false) Integer minSize,
			@RequestParam(name = "maxSize", required = false) Integer maxSize, HttpSession session) {

		model.remove("error");
		holdValue(ftsDto, model, fileType, hplId, fileType, minSize, maxSize);
		List<FileTypeSzDto> fileTypeSzAllItems = (List<FileTypeSzDto>) model.get("fileTypeSzAllItems");

		// validation
		{
			String errorMsg = "";
			// if Hpl Model duplicate
			List<FileTypeSzDto> checkList = fileTypeSzAllItems;
			for (FileTypeSzDto dto : checkList) {
				if (dto.getRowNo() != rowNo && (dto.getFkHplId() == hplId && dto.getFileType() == fileType)) {
					errorMsg += "Record for " + dto.getFkHplId() + ERR_MSG_UNIQUE;
					model.put("error", errorMsg);
					model.remove("success");
					return new ModelAndView("/main/pfc/fileTypeSzList", model);
				}
			}
		}

		for (FileTypeSzDto obj : fileTypeSzAllItems) {
			if (obj.getRowNo() == rowNo) {
				obj.setFkHplId(hplId);
				obj.setFileType(fileType);
				obj.setMinSize(minSize);
				obj.setMaxSize(maxSize);
			}
		}

		model.put("fileTypeSzAllItems", fileTypeSzAllItems);
		manageListButton(false, true, true, model);
		clearListForm(model);

		return new ModelAndView("/main/pfc/fileTypeSzList", model);
	}

	@Deprecated
	@SuppressWarnings("unchecked")
	@GetMapping("/main/pfc/fileTypeSzFormGetData")
	// @RequestMapping(value = "/main/pfc/fileTypeSzFormGetData", method =
	// RequestMethod.GET)
	public ModelAndView retrieveFromDataTable(HttpServletRequest request, @RequestParam(name = "rowNo") int rowNo,
			FileTypeSzDto dto, BindingResult result, HttpSession session, ModelMap modelMap) {

		String mode = model.get("mode").toString();

		logger.debug("retrieveDataFromDt() mode {}", mode);

		model.remove("error");

		List<FileTypeSzDto> fstList = (List<FileTypeSzDto>) model.get("fileTypeSzAllItems");
		fstList.forEach(obj -> {
			if (obj.getRowNo() == rowNo) {
				model.put("hplId", obj.getFkHplId());
				model.put("fileType", obj.getFileType());
				model.put("minSize", obj.getMinSize());
				model.put("maxSize", obj.getMaxSize());
				model.put("rowNo", obj.getRowNo());
			}
		});

		if (!StringUtils.equals(mode, CommonConstants.SCREEN_MODE_VIEW)) {
			manageListButton(false, false, false, model);
		}

		return new ModelAndView("/main/pfc/fileTypeSzList", model);
	}

	@Deprecated
	private Map<String, Object> manageListButton(boolean add, boolean update, boolean delete,
			Map<String, Object> model) {
		model.put("listAddBtn", add);
		model.put("listUpdateBtn", update);
		model.put("listDeleteBtn", delete);

		return model;
	}

	@Deprecated
	private Map<String, Object> clearListForm(Map<String, Object> model) {
		model.remove("rowNo");
		model.remove("hpl");
		model.remove("fileType");
		model.remove("minSize");
		model.remove("maxSize");

		return model;
	}

	@Deprecated
	private Map<String, Object> holdValue(FileTypeSzDto ftszDto, Map<String, Object> model, String screenMode,
			Integer hplId, String fileType, Integer minSize, Integer maxSize) {

		model.put("mode", screenMode);
		model.put("fileTypeSzItem", ftszDto);

		model.put("hplId", hplId);
		model.put("fileType", fileType);
		model.put("minSize", minSize);
		model.put("maxSize", maxSize);

		return model;
	}

	private Map<String, Object> removeAlert(Map<String, Object> model) {
		model.remove("error");
		model.remove("success");

		return model;
	}

	private void getAllLabels() {
		HPL_TXT = msgSource.getMessage("lblHpl", null, Locale.getDefault());
		FILETYPE_TXT = msgSource.getMessage("lblFileType", null, Locale.getDefault());
		FILESZ_TXT = msgSource.getMessage("lblFileSize", null, Locale.getDefault());
		MIN_TXT = msgSource.getMessage("lblMinSize", null, Locale.getDefault());
		MAX_TXT = msgSource.getMessage("lblMaxSize", null, Locale.getDefault());
		MODULE_NAME = msgSource.getMessage("moduleFileTypeSzConf", null, Locale.getDefault());
	}
}
