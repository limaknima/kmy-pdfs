package com.fms.pfc.controller.main;

import java.text.SimpleDateFormat;
import java.util.ArrayList;
import java.util.Date;
import java.util.HashMap;
import java.util.List;
import java.util.Locale;
import java.util.Map;

import javax.servlet.http.HttpServletRequest;
import javax.servlet.http.HttpServletResponse;
import javax.servlet.http.HttpSession;
import javax.validation.Valid;

import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.context.MessageSource;
import org.springframework.stereotype.Controller;
import org.springframework.validation.BindingResult;
import org.springframework.web.bind.annotation.GetMapping;
import org.springframework.web.bind.annotation.PostMapping;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestParam;
import org.springframework.web.context.annotation.SessionScope;
import org.springframework.web.servlet.ModelAndView;

import com.fms.pfc.common.Authority;
import com.fms.pfc.common.CommonConstants;
import com.fms.pfc.common.CommonUtil;
import com.fms.pfc.domain.dto.main.HplDto;
import com.fms.pfc.domain.dto.main.ProdFileDto;
import com.fms.pfc.domain.model.main.ProdFileSearch;
import com.fms.pfc.service.api.base.TrxHisService;
import com.fms.pfc.service.api.main.HplService;
import com.fms.pfc.service.api.main.ProdFileService;
import com.fms.pfc.validation.common.CommonValidation;

@Controller
@SessionScope
public class ProdFileController {
	private static final Logger logger = LoggerFactory.getLogger(ProdFileController.class);

	private Authority auth;
	private CommonValidation commonValServ;
	private MessageSource msgSource;
	private ProdFileService prodFileServ;
	private TrxHisService trxHistServ;
	private HplService hplServ;

	private Map<String, Object> model = new HashMap<String, Object>();
	private String screenMode = "";

	private static final String LT_TXT = "Letter Type";
	private static final String SEC1_TXT = "Section 1";
	private static final String SEC2_TXT = "Section 2";
	private static final String SEC3_TXT = "Section 3";
	private static final String PROD_TXT = "Product Name";
	private static final String COUNTRY_TXT = "Country";
	private static final String GENERIC_TYPE = "Generic";
	private static final String ALL = "ALL";
	private static final String MODULE_NAME = "Production File";
	private static final int DESC_MAX_LENGTH = 1000;
	private static final int YEAR_COUNT = 20;

	@Autowired
	public ProdFileController(Authority auth, CommonValidation commonValServ, MessageSource msgSource,
			ProdFileService prodFileServ, TrxHisService trxHistServ, HplService hplServ) {
		super();
		this.auth = auth;
		this.commonValServ = commonValServ;
		this.msgSource = msgSource;
		this.prodFileServ = prodFileServ;
		this.trxHistServ = trxHistServ;
		this.hplServ = hplServ;
	}

	/**
	 * Display initial screen
	 * 
	 * @param request
	 * @param response
	 * @return
	 */
	@GetMapping("/main/pfc/prodFileList")
	public ModelAndView searchListing(HttpServletRequest request, HttpServletResponse response) {

		removeAlert(model);
		model = auth.onPageLoad(model, request);
		auth.isAuthUrl(request, response);
		model.put("prodFileAllItems", prodFileServ.searchByCriteria(0, 0, "", "", "", "", "", ""));
		model.put("searchHplItems", hplServ.searchByCriteria("", "", "", ""));
		model.put("searchHplModelItems", prodFileServ.findHplModelSelectItems(0));
		model.put("searchYearItems", CommonUtil.yearDropdownItems(YEAR_COUNT));
		model.put("searchMonthItems", CommonUtil.monthDropdownItems());
		model.put("searchDayItems", CommonUtil.dayDropdownItems());

		return new ModelAndView("/main/pfc/prodFileList", model);
	}

	/**
	 * View form
	 * 
	 * @param request
	 * @param ltContId
	 * @return
	 */
	@RequestMapping("/main/pfc/prodFileFormView")
	public ModelAndView viewForm(HttpServletRequest request, @RequestParam(name = "pkPfileId") Integer pkPfileId) {

		removeAlert(model);

		ProdFileDto dto = prodFileServ.findDtoById(pkPfileId);
		trxHistServ.addTrxHistory(new Date(), "View " + MODULE_NAME, request.getRemoteUser(),
				CommonConstants.FUNCTION_TYPE_VIEW, dto.getPkPfileId().toString(),
				CommonConstants.RECORD_TYPE_ID_PROD_FILE, null);

		// Set mode
		screenMode = CommonConstants.SCREEN_MODE_VIEW;
		model.put("mode", screenMode);

		// Set form header
		model.put("header", "View " + MODULE_NAME);

		// Set confirmation message
		model.put("confirmHeader", "Edit cancellation");
		model.put("confirmMsg", "Do you want to cancel Edit this record ?");

		// Put model to HTML
		if (dto != null) {

			model.put("pkPfileId", dto.getPkPfileId());
			model.put("prodFileItem", dto);
			model.put("prodFileItemCurrItem", dto);
			model.put("hplModelId2Temp", dto.getFkHplModelId());

			model.put("hplItems", hplServ.searchByCriteria("", "", "", ""));
			model.put("hplModelItems", prodFileServ.findHplModelSelectItems(0));
			model.put("yearItems", CommonUtil.yearDropdownItems(YEAR_COUNT));
			model.put("monthItems", CommonUtil.monthDropdownItems());

			model.put("createdUser", dto.getCreatorId());
			model.put("modifiedUser", dto.getModifierId());

			SimpleDateFormat formatter = new SimpleDateFormat("dd/MM/yyy hh:mm:ss a");
			try {
				String createdInfo = "Created by " + dto.getCreatorId() + " on "
						+ formatter.format(dto.getCreatedDatetime());
				model.put("createdInfo", createdInfo);
			} catch (Exception e) {
			}

			String modifiedInfo = "";
			try {
				modifiedInfo = "Modified by " + dto.getModifierId() + " on "
						+ formatter.format(dto.getModifiedDatetime());
			} catch (Exception e) {
				modifiedInfo = "Modified by --";
			}
			model.put("modifiedInfo", modifiedInfo);
		}

		return new ModelAndView("/main/pfc/prodFileForm", model);
	}

	/**
	 * Load add form
	 * 
	 * @param request
	 * @return
	 */
	@GetMapping("/main/pfc/prodFileForm")
	public ModelAndView loadNewForm(HttpServletRequest request) {
		removeAlert(model);

		// Set mode
		screenMode = CommonConstants.SCREEN_MODE_ADD;
		model.put("mode", screenMode);

		// Set fields
		model.put("prodFileItem", new ProdFileDto());
		model.put("hplItems", hplServ.searchByCriteria("", "", "", ""));
		model.put("hplModelItems", prodFileServ.findHplModelSelectItems(0));
		model.put("yearItems", CommonUtil.yearDropdownItems(YEAR_COUNT));
		model.put("monthItems", CommonUtil.monthDropdownItems());

		// Set form header
		model.put("header", "Add " + MODULE_NAME);
		// Set confirmation message
		model.put("confirmHeader", "Cancel confirmation");
		model.put("confirmMsg", "Do you want to cancel this record ?");

		return new ModelAndView("/main/pfc/prodFileForm", model);
	}

	/**
	 * Save form
	 * 
	 * @param dto
	 * @param request
	 * @param bindingResult
	 * @param session
	 * @return
	 * @throws Exception
	 */
	@PostMapping("/main/pfc/prodFileFormSave")
	public ModelAndView saveForm(@Valid ProdFileDto dto, HttpServletRequest request, BindingResult bindingResult,
			HttpSession session) throws Exception {

		removeAlert(model);
		String mode = screenMode;

		model.put("prodFileItem", dto);

		String errorMsg = validateForm(dto);

		if (errorMsg.length() != 0) {
			model.put("error", errorMsg);
			model.put("prodFileItem", dto);

			if (mode.equals(CommonConstants.SCREEN_MODE_EDIT)) {
				screenMode = CommonConstants.SCREEN_MODE_EDIT;
				// Set mode to HTML header
				model.put("mode", screenMode);
				model.put("header", "Edit " + MODULE_NAME);
				// Set confirmation message
				model.put("confirmHeader", "Edit cancellation");
				model.put("confirmMsg", "Do you want to cancel edit this record ?");
			}
			return new ModelAndView("/main/pfc/prodFileForm", model);
		}

		if (mode.equals(CommonConstants.SCREEN_MODE_ADD)) {

			try {
				// If no error proceed to save add form
				// Add form
				// ltServ.saveLetterConf(null, dto.getLtId(), dto.getSec1Desc(),
				// dto.getSec2Desc(),
				// dto.getSec3Desc(), dto.getCountryId(), request.getRemoteUser(), prIds);

				// Print add success
				model.put("success", "Record added successfully.");
				model.put("fProdFileItem", new ProdFileDto());

				trxHistServ.addTrxHistory(new Date(), "Insert " + MODULE_NAME, request.getRemoteUser(),
						CommonConstants.FUNCTION_TYPE_INSERT, dto.getPkPfileId().toString(),
						CommonConstants.RECORD_TYPE_ID_PROD_FILE, null);

			} catch (Exception e) {
				// Print DB exception
				e.printStackTrace();
				model.put("error", "Record failed to be added.");
			}

		} else if (mode.equals(CommonConstants.SCREEN_MODE_VIEW)) {
			// Set mode to HTML header
			screenMode = CommonConstants.SCREEN_MODE_VIEW;
			model.put("mode", screenMode);
			model.put("header", MODULE_NAME);

			try {
				// Update form
				// ltServ.saveLetterConf((int) model.get("ltContId"), dto.getLtId(),
				// dto.getSec1Desc(),
				// dto.getSec2Desc(), dto.getSec3Desc(), dto.getCountryId(),
				// request.getRemoteUser(),
				// prIds);

				// Print update success
				model.put("success", "Record updated successfully.");

				trxHistServ.addTrxHistory(new Date(), "Update " + MODULE_NAME, request.getRemoteUser(),
						CommonConstants.FUNCTION_TYPE_UPDATE, dto.getPkPfileId().toString(),
						CommonConstants.RECORD_TYPE_ID_PROD_FILE, null);

			} catch (Exception e) {
				// Print DB exception
				e.printStackTrace();
				model.put("error", "Record failed to update.");
			}
		}

		model.put("prodFileAllItems",
				model.put("prodFileAllItems", prodFileServ.searchByCriteria(0, 0, "", "", "", "", "", "")));

		return new ModelAndView("/main/pfc/prodFileList", model);
	}

	/**
	 * Construct error message based on validation result
	 * 
	 * @param dto
	 * @return
	 */
	private String validateForm(ProdFileDto dto) {
		String errorMsg = "";
//		errorMsg += commonValServ.validateMandatoryInput(dto.getLtId() == null ? "" : dto.getLtId().toString(),
//				LT_TXT);
//		errorMsg += commonValServ.validateMandatoryInput(dto.getSec1Desc(), SEC1_TXT);
//		errorMsg += commonValServ.validateMandatoryInput(dto.getSec2Desc(), SEC2_TXT);
//		errorMsg += commonValServ.validateMandatoryInput(dto.getSec3Desc(), SEC3_TXT);
//		errorMsg += commonValServ.validateInputLength(dto.getSec1Desc(), DESC_MAX_LENGTH, SEC1_TXT);
//		errorMsg += commonValServ.validateInputLength(dto.getSec2Desc(), DESC_MAX_LENGTH, SEC2_TXT);
//		errorMsg += commonValServ.validateInputLength(dto.getSec3Desc(), DESC_MAX_LENGTH, SEC3_TXT);

//
//		if (screenMode == CommonConstants.SCREEN_MODE_ADD) {
//			errorMsg += validateDuplicateFlavStatus(dto.getLtName());
//		} else {
//
//			if (null != model.get("letterTypeCurrItem")) {
//				LetterTypeDto currDto = (LetterTypeDto) model.get("letterTypeCurrItem");
//
//				logger.debug("validateForm cur name=" + currDto.getLtName() + "; new name=" + dto.getLtName());
//				if (!StringUtils.equalsIgnoreCase(currDto.getLtName(), dto.getLtName())) {
//					// check if current name value modified
//					errorMsg += validateDuplicateFlavStatus(dto.getLtName());
//
//				}
//			}
//		}

		return errorMsg;
	}

	/**
	 * Delete item
	 * 
	 * @param request
	 * @param check
	 * @param session
	 * @return
	 */
	@RequestMapping("/main/pfc/prodFileFormDel")
	public ModelAndView deleteBatch(HttpServletRequest request, @RequestParam(value = "tableRow") String[] check,
			HttpSession session) {

		model.remove("error");
		model.remove("success");
		try {
			// Delete form
			for (int i = 0; i < check.length; i++) {

//				if (1==1) {
//					// Print delete failed
//					model.put("error", "Letter Content is in used and it is not allow to delete from the system.");
//				} else {
				prodFileServ.delete(Integer.parseInt(check[i]));
				// Print delete success`
				model.put("success", msgSource.getMessage("msgSuccessDelete", new Object[] {}, Locale.getDefault()));

				trxHistServ.addTrxHistory(new Date(), "Delete " + MODULE_NAME, request.getRemoteUser(),
						CommonConstants.FUNCTION_TYPE_DELETE, check[i], CommonConstants.RECORD_TYPE_ID_PROD_FILE, null);
//				}
			}

		} catch (Exception e) {
			// Print DB exception
			model.put("error", msgSource.getMessage("msgFailDelete", new Object[] {}, Locale.getDefault()));
			e.printStackTrace();
		}

		model.put("prodFileAllItems",
				model.put("prodFileAllItems", prodFileServ.searchByCriteria(0, 0, "", "", "", "", "", "")));

		return new ModelAndView(("/main/pfc/prodFileList"), model);
	}

	/**
	 * Do search
	 * 
	 * @param prName
	 * @param ltType
	 * @param prNameExp
	 * @param session
	 * @return
	 */
	@PostMapping("/main/pfc/prodFileSearch")
	public ModelAndView doSearch(HttpServletRequest request, @RequestParam(name = "searchHplId") Integer searchHplId,
			@RequestParam(name = "searchHplModelId") Integer searchHplModelId,
			@RequestParam(name = "searchYear") String searchYear, @RequestParam(name = "searchMth") String searchMth,
			@RequestParam(name = "searchG2Lot") String searchG2Lot,
			@RequestParam(name = "searchG2LotExp") String searchG2LotExp, @RequestParam(name = "searchPath") String searchPath,
			@RequestParam(name = "searchPathExp") String searchPathExp,
			HttpSession session) {

		boolean hasError = false;

		removeAlert(model);
		String errorMsg = "";

		model.put("searchHplId", searchHplId);
		model.put("searchHplModelId", searchHplModelId);
		model.put("searchYear", searchYear);
		model.put("searchMth", searchMth);
		model.put("searchG2Lot", searchG2Lot);
		model.put("searchG2LotExp", searchG2LotExp);
		model.put("searchPath", searchPath);
		model.put("searchPathExp", searchPathExp);

		try {
			if (errorMsg.length() == 0) {

				List<ProdFileSearch> items = prodFileServ.searchByCriteria(searchHplId, searchHplModelId, searchYear,
						searchMth, searchG2Lot, searchG2LotExp, searchPath, searchPathExp);
				model.put("prodFileAllItems", items);

				StringBuffer sb = new StringBuffer();
				sb.append("Search Criteria: ");
				//sb.append("Letter Type=").append(ltType == null ? "<ALL>" : ltType).append(", ");
				//sb.append("Product Name=").append(prName.isEmpty() ? "<ALL>" : prName);

				trxHistServ.addTrxHistory(new Date(), "Search " + MODULE_NAME, request.getRemoteUser(),
						CommonConstants.FUNCTION_TYPE_SEARCH, "Search " + MODULE_NAME,
						CommonConstants.RECORD_TYPE_ID_PROD_FILE, sb.toString());

			} else {
				hasError = true;
			}

		} catch (Exception e) {
			e.printStackTrace();
			hasError = true;
			errorMsg += "Failed to get record.";
			errorMsg += e.toString();

		} finally {
			if (hasError == true) {
				model.put("error", errorMsg);
				// return back user input
				model.put("prodFileAllItems", model.put("prodFileAllItems", prodFileServ.searchByCriteria(0, 0, "", "", "", "", "", "")));
			}
		}

		return new ModelAndView("/main/pfc/prodFileList", model);
	}

	private Map<String, Object> removeAlert(Map<String, Object> model) {
		model.remove("error");
		model.remove("success");

		return model;
	}

}
