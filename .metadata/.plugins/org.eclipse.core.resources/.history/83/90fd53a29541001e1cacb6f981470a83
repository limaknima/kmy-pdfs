package com.fms.pfc.service.api.main;

import java.io.File;
import java.io.IOException;
import java.util.Date;
import java.util.List;
import java.util.Objects;
import java.util.stream.Collectors;

import javax.transaction.Transactional;

import org.apache.commons.io.FileUtils;
import org.apache.commons.lang.StringUtils;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Service;
import org.springframework.web.multipart.MultipartFile;

import com.fms.pfc.domain.converter.main.ProdFileConverter;
import com.fms.pfc.domain.dto.main.FileTypeSzDto;
import com.fms.pfc.domain.dto.main.HplModelDto;
import com.fms.pfc.domain.dto.main.ProdFileDto;
import com.fms.pfc.domain.dto.main.RelPathDto;
import com.fms.pfc.domain.dto.main.UsbConfDto;
import com.fms.pfc.domain.model.Usr;
import com.fms.pfc.domain.model.main.ProdFile;
import com.fms.pfc.domain.model.main.ProdFileSearch;
import com.fms.pfc.repository.main.api.ProdFileRepository;
import com.fms.pfc.repository.main.api.ProdFileSearchRepository;

@Service
public class ProdFileService {

	private final Logger logger = LoggerFactory.getLogger(ProdFileService.class);

	private ProdFileRepository prodFileRepo;
	private ProdFileConverter prodFileConv;
	private ProdFileSearchRepository prodFileSearchRepo;
	private HplModelService hplModelServ;
	private UsbConfService usbConfServ;
	private FileTypeSzService ftSzServ;
	private RelPathService pathServ;

	@Autowired
	public ProdFileService(ProdFileRepository prodFileRepo, ProdFileConverter prodFileConv,
			ProdFileSearchRepository prodFileSearchRepo, HplModelService hplModelServ, UsbConfService usbConfServ,
			FileTypeSzService ftSzServ, RelPathService pathServ) {
		super();
		this.prodFileRepo = prodFileRepo;
		this.prodFileConv = prodFileConv;
		this.prodFileSearchRepo = prodFileSearchRepo;
		this.hplModelServ = hplModelServ;
		this.usbConfServ = usbConfServ;
		this.ftSzServ = ftSzServ;
		this.pathServ = pathServ;
	}

	/**
	 * Find Entity by id
	 * @param id
	 * @return
	 */
	public ProdFile findById(Integer id) {
		return prodFileRepo.findById(id).orElse(null);
	}

	/**
	 * Find DTO by id
	 * @param id
	 * @return
	 */
	public ProdFileDto findDtoById(Integer id) {
		ProdFile rel = findById(id);
		return prodFileConv.entityToDto(rel);
	}

	/**
	 * Find list of DTO
	 * @return
	 */
	public List<ProdFileDto> findAllDto() {
		List<ProdFile> models = prodFileRepo.findAll();
		return prodFileConv.entityToDtoList(models);
	}

	/**
	 * Find HPL Model list by HPL ID
	 * @param parentId
	 * @return
	 */
	public List<HplModelDto> findHplModelSelectItems(Integer parentId) {
		return hplModelServ.findAllByParentNative(parentId);
	}

	/**
	 * Search file listing by criteria
	 * @param searchHplId
	 * @param searchHplModelId
	 * @param searchYear
	 * @param searchMth
	 * @param g2LotNo
	 * @param g2LotNoExp
	 * @param path
	 * @param pathExp
	 * @return ProdFileSearch object list
	 */
	public List<ProdFileSearch> searchByCriteria(String searchHplId, String searchHplModelId, String searchYear,
			String searchMth, String g2LotNo, String g2LotNoExp, String path, String pathExp) {
		return prodFileSearchRepo.searchByCriteria(searchHplId,searchHplModelId, searchYear, searchMth, g2LotNo, g2LotNoExp, path,
				pathExp);
	}

	/**
	 * Save record into DB
	 * Save file into Disk
	 * @param dto
	 * @param userId
	 * @param isFileChanged
	 * @param finalFileContent
	 * @return
	 * @throws Exception
	 */
	@Transactional
	public Integer save(ProdFileDto dto, String userId, boolean isFileChanged, MultipartFile finalFileContent)
			throws Exception {
		RelPathDto path = pathServ.findDtoById(Integer.valueOf(dto.getFilePath()));
		Date currentDate = new Date();
		boolean isCreate = false;
		String dir = "";
		String oldDir = "";
		String deleteDir = "";
		// save parent
		if (Objects.isNull(dto.getPkPfileId()) || 0 == dto.getPkPfileId()) {
			dto.setCreatorId(userId);
			dto.setCreatedDatetime(currentDate);
			dir = path.getFilePath();
			isCreate = true;
		} else {
			ProdFileDto existing = findDtoById(dto.getPkPfileId());
			dto.setCreatorId(existing.getCreatorId());
			dto.setCreatedDatetime(existing.getCreatedDatetime());
			dto.setModifierId(userId);
			dto.setModifiedDatetime(currentDate);
			dir = path.getFilePath();
			isCreate = false;

			if (!isFileChanged) {
				dto.setFileName(existing.getFileName());
				dto.setFileSize(existing.getFileSize());
				dto.setFileType(existing.getFileType());
				dto.setCrcValue(existing.getCrcValue());
			} else {
				// if file change
				// if (!StringUtils.equals(existing.getFilePath(), dto.getFilePath())) {
				RelPathDto oldPath = pathServ.findDtoById(Integer.valueOf(existing.getFilePath()));
				oldDir = oldPath.getFilePath();
				deleteDir = (StringUtils.isEmpty(oldDir) ? dir : oldDir) + File.separator + existing.getFileName();

				logger.debug("save() isFileChanged?={}, deleteDir={}", isFileChanged, deleteDir);
				// }
			}
		}

		ProdFile entity = prodFileConv.dtoToEntity(dto);
		prodFileRepo.saveAndFlush(entity);

		// need to do something to files
		manageFile(isFileChanged, finalFileContent, isCreate, dir, deleteDir);

		return entity.getPkPfileId();
	}

	/**
	 * Delete Prod file record
	 * @param id
	 */
	@Transactional
	public void delete(Integer id) {
		prodFileRepo.deleteById(id);
	}

	/**
	 * Find USB Conf list
	 * @param name
	 * @param serialNo
	 * @return
	 */
	public List<UsbConfDto> findUsbConf(String name, String serialNo) {
		List<UsbConfDto> usbConfList = usbConfServ.findAllDto();
		usbConfList = usbConfList.stream().filter(arg0 -> (StringUtils.equalsIgnoreCase(arg0.getName(), name))
				&& (StringUtils.equalsIgnoreCase(arg0.getSerialNo(), serialNo))).collect(Collectors.toList());

		return usbConfList;
	}

	/**
	 * Find USB Conf user list
	 * @param pkUconfId
	 * @return
	 */
	public List<Usr> findUsbUsrByParent(Integer pkUconfId) {
		List<Usr> usrDtoList = usbConfServ.getUsrSelectedList(pkUconfId);
		return usrDtoList;
	}
	
	/**
	 * Find file type, size list
	 * @param hplId
	 * @return
	 */
	public List<FileTypeSzDto> findFileTypeSzList(String hplId) {
		List<FileTypeSzDto> ftSzList = ftSzServ.findAllDto();
		ftSzList = ftSzList.stream().filter(arg0 -> StringUtils.equals(arg0.getHpl(), hplId)).collect(Collectors.toList());
		return ftSzList;
	}
	
	public long countAll() {
		return prodFileRepo.count();
	}
	
	public int countFileByCriteria(String hpl, int year, int month) {
		return prodFileRepo.countFileByCriteria(hpl, year, month);
	}

	/**
	 * Save file to disk
	 * 
	 * @param finalFileContent
	 * @param dir
	 * @throws IOException
	 */
	private void saveFileToDisk(MultipartFile finalFileContent, String dir) throws Exception {

		if (Objects.isNull(finalFileContent) || StringUtils.isEmpty(dir)) {
			throw new Exception("File or directory is not supplied or null!");
		}

		logger.debug("saveFileToDisk() file={}, dir={}", finalFileContent.getOriginalFilename(), dir);

		File saveFile = new File(dir + File.separator + finalFileContent.getOriginalFilename());
		FileUtils.writeByteArrayToFile(saveFile, finalFileContent.getBytes());
	}

	/**
	 * Manage file if it is new, or updated
	 * 
	 * @param isFileChanged
	 * @param finalFileContent
	 * @param isCreate
	 * @param dir
	 * @param deleteDir
	 * @throws Exception
	 */
	private void manageFile(boolean isFileChanged, MultipartFile finalFileContent, boolean isCreate, String dir,
			String deleteDir) throws Exception {
		try {
			// new file, add mode
			if (isCreate) {
				logger.debug("manageFile() new file, add mode");
				// save file to disk
				saveFileToDisk(finalFileContent, dir);
			}

			// old/current file, edit mode
			if (!isCreate && !isFileChanged) {
				logger.debug("manageFile() old/current file, edit mode");
				// do nothing to file
			}

			// file replace/update, edit mode
			// For file update case, delete old file
			if (!isCreate) {
				if (isFileChanged && StringUtils.isNotEmpty(deleteDir)) {
					logger.debug("manageFile() file replace/update, edit mode");
					// remove old file from disk
					FileUtils.deleteQuietly(new File(deleteDir));
					// save new file to disk
					saveFileToDisk(finalFileContent, dir);
				}
			}

		} catch (Exception e) {
			throw new Exception();
		}
	}
}
