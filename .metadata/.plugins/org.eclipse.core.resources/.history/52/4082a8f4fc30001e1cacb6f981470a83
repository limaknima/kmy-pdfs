package com.fms.pfc.controller.main;

import java.util.ArrayList;
import java.util.Date;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

import javax.servlet.http.HttpServletRequest;
import javax.servlet.http.HttpServletResponse;
import javax.servlet.http.HttpSession;

import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.context.MessageSource;
import org.springframework.stereotype.Controller;
import org.springframework.web.bind.annotation.GetMapping;
import org.springframework.web.bind.annotation.PostMapping;
import org.springframework.web.bind.annotation.RequestParam;
import org.springframework.web.context.annotation.SessionScope;
import org.springframework.web.servlet.ModelAndView;

import com.fms.pfc.common.Authority;
import com.fms.pfc.common.CommonConstants;
import com.fms.pfc.domain.dto.main.OnDemandSearchDto;
import com.fms.pfc.service.api.base.TrxHisService;
import com.fms.pfc.service.api.main.OnDemandSearchService;
import com.fms.pfc.validation.common.CommonValidation;

@Controller
@SessionScope
public class OnDemandSearchController {
	
	private static final Logger logger = LoggerFactory.getLogger(OnDemandSearchController.class);

	private Authority auth;
	private CommonValidation commonValServ;
	private MessageSource msgSource;
	private OnDemandSearchService odsServ;
	private TrxHisService trxHistServ;

	private Map<String, Object> model = new HashMap<String, Object>();
	private String screenMode = "";

	private static final String LT_TXT = "Letter Type";
	private static final String SEC1_TXT = "Section 1";
	private static final String SEC2_TXT = "Section 2";
	private static final String SEC3_TXT = "Section 3";
	private static final String PROD_TXT = "Product Name";
	private static final String COUNTRY_TXT = "Country";
	private static final String GENERIC_TYPE = "Generic";
	private static final String ALL = "ALL";
	private static final String MODULE_NAME = "On Demand Search";
	private static final int DESC_MAX_LENGTH = 1000;
	
	@Autowired
	public OnDemandSearchController(Authority auth, CommonValidation commonValServ, MessageSource msgSource,
			OnDemandSearchService odsServ, TrxHisService trxHistServ) {
		super();
		this.auth = auth;
		this.commonValServ = commonValServ;
		this.msgSource = msgSource;
		this.odsServ = odsServ;
		this.trxHistServ = trxHistServ;
		
		getAllLabels();
	}
	
	/**
	 * Display initial screen
	 * 
	 * @param request
	 * @param response
	 * @return
	 */
	@GetMapping("/main/pfc/onDemandList")
	public ModelAndView initListing(HttpServletRequest request, HttpServletResponse response) {

		removeAlert(model);
		model = auth.onPageLoad(model, request);
		auth.isAuthUrl(request, response);
		model.put("odsAllItems", odsServ.searchByCriteria("", "", "", "", "", "", ""));

		return new ModelAndView("/main/pfc/onDemandSearch", model);
	}
	
	/**
	 * Do search
	 * 
	 * @param prName
	 * @param ltType
	 * @param prNameExp
	 * @param session
	 * @return
	 */
	@PostMapping("/main/pfc/onDemandSearch")
	public ModelAndView search(HttpServletRequest request, @RequestParam(name = "prName") String prName,
			@RequestParam(name = "prNameExp") String prNameExp, @RequestParam(name = "ltType") Integer ltType,
			HttpSession session) {

		boolean hasError = false;

		removeAlert(model);
		String errorMsg = "";

		model.put("prName", prName);
		model.put("prNameExp", prNameExp);
		model.put("ltType", ltType);

		try {
			if (errorMsg.length() == 0) {

				List<OnDemandSearchDto> items = new ArrayList<>();// = odsServ.searchByCriteria(ods, model, year,
																// month, day, prodLn, seq);

				model.put("odsAllItems", items);

				StringBuffer sb = new StringBuffer();
				sb.append("Search Criteria: ");
				sb.append("Letter Type=").append(ltType == null ? "<ALL>" : ltType).append(", ");
				sb.append("Product Name=").append(prName.isEmpty() ? "<ALL>" : prName);

				trxHistServ.addTrxHistory(new Date(), "Search " + MODULE_NAME, request.getRemoteUser(),
						CommonConstants.FUNCTION_TYPE_SEARCH, "Search " + MODULE_NAME,
						CommonConstants.RECORD_TYPE_ID_ON_DEMAND, sb.toString());

			} else {
				hasError = true;
			}

		} catch (Exception e) {
			e.printStackTrace();
			hasError = true;
			errorMsg += "Failed to get record.";
			errorMsg += e.toString();

		} finally {
			if (hasError == true) {
				model.put("error", errorMsg);
				// return back user input
				model.put("odsAllItems", odsServ.findAllDto());
			}
		}

		return new ModelAndView("/main/pfc/onDemandSearch", model);
	}
	
	private Map<String, Object> removeAlert(Map<String, Object> model) {
		model.remove("error");
		model.remove("success");

		return model;
	}
	
	private void getAllLabels() {
		
	}
}
